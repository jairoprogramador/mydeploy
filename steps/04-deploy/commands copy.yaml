commands:
  - name: "configurar_contexto_aks"
    description: "Se configura el contexto de Kubernetes para conectarse al cluster AKS"
    cmd: "az aks get-credentials --resource-group ${var.azure_resource_group_name} --name ${var.kubernetes_cluster_name} --overwrite-existing"

  - name: "crear_namespace"
    description: "Se crea el namespace de Kubernetes si no existe"
    cmd: "kubectl create namespace ${var.kubernetes_namespace} --dry-run=client -o yaml | kubectl apply -f -"

  - name: "configurar_acr_secret"
    description: "Se configura el secret para autenticación con Azure Container Registry"
    cmd: "kubectl create secret docker-registry acr-secret --namespace ${var.kubernetes_namespace} --docker-server=${var.azure_container_registry_login_server} --docker-username=${var.azure_container_registry_name} --docker-password=$(az acr credential show --name ${var.azure_container_registry_name} --query passwords[0].value -o tsv) --dry-run=client -o yaml | kubectl apply -f -"

  - name: "aplicar_deployment"
    description: "Se despliega la aplicación Spring Boot en el cluster AKS"
    cmd: "kubectl apply -f deployment.yaml"

  - name: "aplicar_service"
    description: "Se crea el servicio de Kubernetes para exponer la aplicación"
    cmd: "kubectl apply -f service.yaml"

  - name: "aplicar_ingress"
    description: "Se configura el ingress para acceso externo a la aplicación"
    cmd: "kubectl apply -f ingress.yaml"

  - name: "verificar_deployment"
    description: "Se verifica que el deployment se haya completado correctamente"
    cmd: "kubectl rollout status deployment/${var.deployment_name} --namespace ${var.kubernetes_namespace} --timeout=300s"

  - name: "verificar_pods"
    description: "Se verifica el estado de los pods de la aplicación"
    cmd: "kubectl get pods --namespace ${var.kubernetes_namespace} -l app=${var.project_name}"

  - name: "verificar_servicios"
    description: "Se verifica que los servicios estén funcionando correctamente"
    cmd: "kubectl get services --namespace ${var.kubernetes_namespace} -l app=${var.project_name}"

  - name: "verificar_ingress"
    description: "Se verifica la configuración del ingress y su estado"
    cmd: "kubectl get ingress --namespace ${var.kubernetes_namespace} -l app=${var.project_name}"
    workdir: "./k8s"
    templates:
      path:
        - "./"
    outputs:
      - name: "azure_resource_group_name"
        description: "Devuelve el nombre del grupo de recursos creado en Azure"
        probe: azure_resource_group_name\s*=\s*"([^"]+)"

      - name: "azure_container_registry_name"
        description: "Devuelve el nombre del Azure Container Registry (ACR) creado para almacenar imágenes de contenedores"
        probe: azure_container_registry_name\s*=\s*"([^"]+)"

         finalmente, conectar todo en el main.go del cmd.